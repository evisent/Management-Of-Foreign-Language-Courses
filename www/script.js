let stateData = {};
let languagesData = {};

async function createStudent() {
    try {
        const response = await fetch('/create_student', {
            method: 'POST'
        });
        const data = await response.json();
        getState();
        addToOutput("‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
        loadLanguages(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    } catch (error) {
        addToOutput("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: " + error);
    }
}

async function deleteStudent() {
    try{
        const response = await fetch('/delete_student', {
            method: 'POST'
        })
        const data = await response.json();
        addToOutput("‚úÖ –°—Ç—É–¥–µ–Ω—Ç –ø–æ–∫–∏–Ω—É–ª –∫—É—Ä—Å");
        loadLanguages();
        getState();
    } catch(error){
        addToOutput("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: " + error);
    }
}

async function getState() {
    try {
        const response = await fetch('/state');
        stateData = await response.json();
        updateUI();
    } catch (error) {
        addToOutput("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: " + error);
    }
}

async function loadLanguages() {
    try {
        const response = await fetch('/groups');
        const data = await response.json();
        languagesData = data.groups || [];
        displayLanguages(languagesData);
    } catch (error) {
        addToOutput("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —è–∑—ã–∫–æ–≤: " + error);
    }
}

function displayLanguages(groups) {
    const list = document.getElementById('languagesList');
    
    if (!groups || groups.length === 0) {
        list.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üåç</div>
                <h3>–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã</p>
            </div>
        `;
        return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —è–∑—ã–∫–∞–º
    const languagesMap = {};
    groups.forEach(group => {
        const lang = group.language || 'Unknown';
        if (!languagesMap[lang]) {
            languagesMap[lang] = [];
        }
        languagesMap[lang].push(group);
    });

    list.innerHTML = Object.entries(languagesMap).map(([language, langGroups]) => {
        const totalStudents = langGroups.reduce((sum, group) => sum + (group.students?.length || 0), 0);
        const totalRevenue = langGroups.reduce((sum, group) => {
            const groupRevenue = (group.students || []).reduce((studentSum, student) => 
                studentSum + (student.price || 0), 0
            );
            return sum + groupRevenue;
        }, 0);
        
        return `
            <div class="language-item">
                <div class="language-header" onclick="toggleLanguage('${language}')">
                    <div class="language-name">
                        ${getLanguageFlag(language)} ${language}
                        <span style="font-size: 0.8em; color: var(--success); margin-left: 8px;">
                            üí∞ ${totalRevenue} ‚ÇΩ
                        </span>
                    </div>
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <span class="language-count">${langGroups.length} –≥—Ä—É–ø–ø</span>
                        <span class="language-toggle">‚ñº</span>
                    </div>
                </div>
                <div class="groups-list" id="groups-${language}">
                    ${langGroups.map(group => {
                        const groupRevenue = (group.students || []).reduce((sum, student) => 
                            sum + (student.price || 0), 0
                        );
                        const avgPrice = group.students?.length ? 
                            Math.round(groupRevenue / group.students.length) : 0;
                            
                        return `
                        <div class="group-item" onclick="showGroupDetails('${language}', ${group.level}, '${group.intensity_name}')">
                            <div class="group-info">
                                <div>
                                    <div class="group-level">–£—Ä–æ–≤–µ–Ω—å ${group.level || 1}</div>
                                    <div class="group-intensity">
                                        ${group.intensity_name || 'Unknown'} (${group.intensity_days || 1} –¥–Ω–µ–π)
                                        <div style="color: var(--success); font-size: 0.8em; margin-top: 2px;">
                                            üí∞ ${avgPrice} ‚ÇΩ/—Å—Ç—É–¥
                                        </div>
                                    </div>
                                </div>
                                <div class="group-students-count">${group.students?.length || 0}</div>
                            </div>
                        </div>
                    `}).join('')}
                </div>
            </div>
        `;
    }).join('');
}

function getLanguageFlag(language) {
    const flags = {
        'English': 'EN',
        'Spanish': 'ES', 
        'French': 'FR',
        'German': 'DE',
        'Chinese': 'CN',
    };
    return flags[language] || 'üåç';
}

function toggleLanguage(language) {
    const groupsList = document.getElementById(`groups-${language}`);
    const toggle = groupsList.previousElementSibling.querySelector('.language-toggle');
    
    groupsList.classList.toggle('expanded');
    toggle.classList.toggle('expanded');
}

function showGroupDetails(language, level, intensityName) {
    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –≤ –¥–∞–Ω–Ω—ã—Ö
    const group = languagesData.find(g => 
        g.language === language && 
        g.level === level && 
        g.intensity_name === intensityName
    );

    if (!group) return;

    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø
    document.querySelectorAll('.group-item').forEach(item => {
        item.classList.remove('active');
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ
    event.target.closest('.group-item').classList.add('active');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
    const details = document.getElementById('groupDetails');
    details.innerHTML = `
        <div class="details-card">
            <div class="details-header">
                <div class="details-title">
                    ${getLanguageFlag(language)} ${language} - –£—Ä–æ–≤–µ–Ω—å ${level}
                </div>
            </div>
            
            <div class="details-meta">
                <div class="meta-item">
                    <div class="meta-label">–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å</div>
                    <div class="meta-value">${intensityName} (${group.intensity_days || 1} –¥–Ω–µ–π)</div>
                </div>
                <div class="meta-item">
                    <div class="meta-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</div>
                    <div class="meta-value">${group.students?.length || 0}</div>
                </div>
                <div class="meta-item">
                    <div class="meta-label">–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞</div>
                    <div class="meta-value">${calculateAveragePrice(group.students)} ‚ÇΩ</div>
                </div>
            </div>

            <div class="students-section">
                <h4>üë• –°—Ç—É–¥–µ–Ω—Ç—ã –≤ –≥—Ä—É–ø–ø–µ</h4>
                <div class="students-grid">
                    ${(group.students || []).map(student => `
                        <div class="student-card">
                            <div class="student-avatar">
                                ${student.name ? student.name.charAt(0).toUpperCase() : '?'}
                            </div>
                            <div class="student-info">
                                <div class="student-name">${student.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}</div>
                                <div class="student-languages">
                                    <span>–¶–µ–Ω–∞: ${student.price || 0} ‚ÇΩ</span>
                                    <span style="margin-left: 10px; color: var(--gray);">${language}</span>
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        </div>
    `;

    addToOutput(`üìñ –û—Ç–∫—Ä—ã—Ç–∞ –≥—Ä—É–ø–ø–∞: ${language} - –£—Ä–æ–≤–µ–Ω—å ${level}`);
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
function calculateAveragePrice(students) {
    if (!students || students.length === 0) return 0;
    
    const total = students.reduce((sum, student) => sum + (student.price || 0), 0);
    return Math.round(total / students.length);
}

function clearSelection() {
    document.querySelectorAll('.group-item').forEach(item => {
        item.classList.remove('active');
    });
    document.getElementById('groupDetails').innerHTML = `
        <div class="empty-state">
            <div class="empty-icon">üëÜ</div>
            <h3>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É</h3>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–ª–∏ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª–∏</p>
        </div>
    `;
}

async function resetSchool() {
    if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")) {
        return;
    }
    
    try {
        const response = await fetch('/reset', {
            method: 'POST'
        });
        const data = await response.json();
        addToOutput("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!");
        getState();
        clearSelection();
        loadLanguages();
    } catch (error) {
        addToOutput("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–∏—Å—Ç–µ–º—ã: " + error);
    }
}



function updateUI() {
    document.getElementById('studentsCount').textContent = stateData.students_count || 0;
    document.getElementById('groupsCount').textContent = stateData.groups_count || 0;
}

function clearOutput() {
    document.getElementById('output').textContent = "–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω\n";
    addToOutput("üóëÔ∏è –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω");
}

function addToOutput(message) {
    const output = document.getElementById('output');
    const timestamp = new Date().toLocaleTimeString();
    output.textContent += `[${timestamp}] ${message}\n`;
    output.scrollTop = output.scrollHeight;
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    addToOutput("üöÄ –°–∏—Å—Ç–µ–º–∞ —è–∑—ã–∫–æ–≤–æ–π —à–∫–æ–ª—ã –∑–∞–ø—É—â–µ–Ω–∞");
    getState();
    loadLanguages();
});